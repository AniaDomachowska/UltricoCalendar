// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UltricoGoogleCalendar.DataLayer;

namespace UltricoGoogleCalendar.DataLayer.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20190927070511_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("UltricoGoogleCalendar.DataLayer.Model.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<Guid>("OccurenceId");

                    b.Property<int?>("ParentEventId");

                    b.Property<int?>("ScheduleId");

                    b.Property<string>("Title");

                    b.Property<DateTime>("Updated");

                    b.Property<bool>("WholeDayEvent");

                    b.HasKey("Id");

                    b.HasIndex("ParentEventId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("UltricoGoogleCalendar.DataLayer.Model.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnnualRepeatOnDay");

                    b.Property<int>("AnnualRepeatOnMonth");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("DailyAtTime");

                    b.Property<DateTime?>("EndDateTime");

                    b.Property<int>("MonthlyRepeatOnDay");

                    b.Property<int>("ScheduleType");

                    b.Property<DateTime?>("StartDateTime");

                    b.Property<DateTime>("Updated");

                    b.Property<int>("WeeklyEndsAfterNoOfOccurrences");

                    b.Property<bool>("WeeklyRepeatNumberOfWeeks");

                    b.Property<bool>("WeeklyRepeatOnFriday");

                    b.Property<bool>("WeeklyRepeatOnMonday");

                    b.Property<bool>("WeeklyRepeatOnSaturday");

                    b.Property<bool>("WeeklyRepeatOnSunday");

                    b.Property<bool>("WeeklyRepeatOnThursday");

                    b.Property<bool>("WeeklyRepeatOnTuesday");

                    b.Property<bool>("WeeklyRepeatOnWednesday");

                    b.HasKey("Id");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("UltricoGoogleCalendar.DataLayer.Model.Event", b =>
                {
                    b.HasOne("UltricoGoogleCalendar.DataLayer.Model.Event", "ParentEvent")
                        .WithMany()
                        .HasForeignKey("ParentEventId");

                    b.HasOne("UltricoGoogleCalendar.DataLayer.Model.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId");
                });
#pragma warning restore 612, 618
        }
    }
}
